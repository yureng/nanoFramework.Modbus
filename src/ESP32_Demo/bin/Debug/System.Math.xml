<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Math</name>
    </assembly>
    <members>
        <member name="T:System.Math">
            <summary>
            Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.
            </summary>
        </member>
        <member name="F:System.Math.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.
            </summary>
            <remarks>The value of this field is 3.14159265358979323846.</remarks>
        </member>
        <member name="F:System.Math.E">
            <summary>
            Represents the natural logarithmic base, specified by the constant, e.
            </summary>
            <remarks>The value of this field is 2.7182818284590452354.</remarks>
        </member>
        <member name="M:System.Math.Abs(System.Int32)">
            <summary>
            Returns the absolute value of a 32-bit signed integer.
            </summary>
            <param name="value">A number that is greater than <see cref="F:System.Int32.MinValue"/>, but less than or equal to <see cref="F:System.Int32.MaxValue"/>.</param>
            <returns>A 32-bit signed integer, x, such that 0 ≤ x ≤ <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:System.Math.Abs(System.Double)">
            <summary>
            Returns the absolute value of a double-precision floating-point number.
            </summary>
            <param name="value">A number that is greater than or equal to <see cref="F:System.Double.MinValue"/>, but less than or equal to <see cref="F:System.Double.MaxValue"/>.</param>
            <returns>A double-precision floating-point number, x, such that 0 ≤ x ≤ <see cref="F:System.Double.MaxValue"/>.</returns>
        </member>
        <member name="M:System.Math.Abs(System.Single)">
            <summary>
            Returns the absolute value of a single-precision floating-point number.
            </summary>
            <param name="value">A number that is greater than or equal to <see cref="F:System.Single.MinValue"/>, but less than or equal to <see cref="F:System.Single.MaxValue"/>.</param>
            <returns>A single-precision floating-point number, x, such that 0 ≤ x ≤ <see cref="F:System.Single.MaxValue"/>.</returns>
        </member>
        <member name="M:System.Math.Acos(System.Double)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="d">A number representing a cosine, where d must be greater than or equal to -1, but less than or equal to 1. </param>
            <returns>An angle, θ, measured in radians, such that 0 ≤ θ ≤ π -or- <see cref="F:System.Double.NaN"/> if d &lt; -1 or d > 1 or d equals <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:System.Math.Asin(System.Double)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="d">A number representing a sine, where d must be greater than or equal to -1, but less than or equal to 1.</param>
            <returns>An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2 -or- <see cref="F:System.Double.NaN"/> if d &lt; -1 or d> 1 or d equals <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:System.Math.Atan(System.Double)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="d">A number representing a tangent. </param>
            <returns>An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2. -or- <see cref="F:System.Double.NaN"/> if d equals NaN, -π/2 rounded to double precision(-1.5707963267949) if d equals <see cref="F:System.Double.NegativeInfinity"/>, or π/2 rounded to double precision(1.5707963267949) if d equals <see cref="F:System.Double.PositiveInfinity"/>.</returns>
        </member>
        <member name="M:System.Math.Atan2(System.Double,System.Double)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point. </param>
            <param name="x">The x coordinate of a point. </param>
            <returns>An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane.</returns>
        </member>
        <member name="M:System.Math.Cbrt(System.Double)">
            <summary>
            Returns the cube root of a specified number.
            </summary>
            <param name="d">The number whose cube root is to be found.</param>
            <returns>The cube root of d. -or- <see cref="F:System.Double.NaN"/> if <paramref name="d"/> equals <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:System.Math.Ceiling(System.Double)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.
            </summary>
            <param name="d">A double-precision floating-point number. </param>
            <returns>The smallest integral value that is greater than or equal to d. If d is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned. Note that this method returns a <see cref="T:System.Double"/> instead of an integral type.</returns>
        </member>
        <member name="M:System.Math.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Returns <paramref name="value"/> clamped to the inclusive range of <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to be clamped.</param>
            <param name="min">The lower bound of the result.</param>
            <param name="max">The upper bound of the result.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="max"/> &lt; <paramref name="min"/>.</exception>
            <returns>
            <paramref name="value"/> if <paramref name="min"/> ≤ <paramref name="value"/> ≤ <paramref name="max"/>.
            -or-
            <paramref name="min"/> if <paramref name="value"/>&lt;<paramref name="min"/>.
            -or-
            max if <paramref name="max"/>&lt;<paramref name="value"/>.
            </returns>
        </member>
        <member name="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns <paramref name="value"/> clamped to the inclusive range of <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to be clamped.</param>
            <param name="min">The lower bound of the result.</param>
            <param name="max">The upper bound of the result.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="max"/> &lt; <paramref name="min"/>.</exception>
            <returns>
            <paramref name="value"/> if <paramref name="min"/> ≤ <paramref name="value"/> ≤ <paramref name="max"/>.
            -or-
            <paramref name="min"/> if <paramref name="value"/>&lt;<paramref name="min"/>.
            -or-
            max if <paramref name="max"/>&lt;<paramref name="value"/>.
            </returns>
        </member>
        <member name="M:System.Math.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Returns <paramref name="value"/> clamped to the inclusive range of <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to be clamped.</param>
            <param name="min">The lower bound of the result.</param>
            <param name="max">The upper bound of the result.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="max"/> &lt; <paramref name="min"/>.</exception>
            <returns>
            <paramref name="value"/> if <paramref name="min"/> ≤ <paramref name="value"/> ≤ <paramref name="max"/>.
            -or-
            <paramref name="min"/> if <paramref name="value"/>&lt;<paramref name="min"/>.
            -or-
            max if <paramref name="max"/>&lt;<paramref name="value"/>.
            </returns>
        </member>
        <member name="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Returns <paramref name="value"/> clamped to the inclusive range of <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <param name="value">The value to be clamped.</param>
            <param name="min">The lower bound of the result.</param>
            <param name="max">The upper bound of the result.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="max"/> &lt; <paramref name="min"/>.</exception>
            <returns>
            <paramref name="value"/> if <paramref name="min"/> ≤ <paramref name="value"/> ≤ <paramref name="max"/>.
            -or-
            <paramref name="min"/> if <paramref name="value"/>&lt;<paramref name="min"/>.
            -or-
            max if <paramref name="max"/>&lt;<paramref name="value"/>.
            </returns>
        </member>
        <member name="M:System.Math.Cos(System.Double)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians. </param>
            <returns>The cosine of a. If a is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:System.Math.Cosh(System.Double)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians. </param>
            <returns>The hyperbolic cosine of <paramref name="value"/>. If <paramref name="value"/> is equal to <see cref="F:System.Double.NegativeInfinity"/> or <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.PositiveInfinity"/> is returned. If value is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
        </member>
        <member name="M:System.Math.Exp(System.Double)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="d">A number specifying a power. </param>
            <returns>The number e raised to the power <paramref name="d"/>. If <paramref name="d"/> equals <see cref="F:System.Double.NaN"/> or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned. If <paramref name="d"/> equals <see cref="F:System.Double.NegativeInfinity"/>, 0 is returned.</returns>
        </member>
        <member name="M:System.Math.Floor(System.Double)">
            <summary>
            Returns the largest integer less than or equal to the specified double-precision floating-point number.
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>The largest integer less than or equal to <paramref name="d"/>. If <paramref name="d"/> is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned.</returns>
        </member>
        <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
            <summary>
            Returns the remainder resulting from the division of a specified number by another specified number.
            </summary>
            <param name="x">A dividend. </param>
            <param name="y">A divisor. </param>
            <returns>A number equal to <paramref name="x"/> - (<paramref name="y"/> Q), where Q is the quotient of <paramref name="x"/> / <paramref name="y"/> rounded to the nearest integer (if <paramref name="x"/> / <paramref name="y"/> falls halfway between two integers, the even integer is returned).
            If <paramref name="x"/> - (<paramref name="y"/> Q) is zero, the value +0 is returned if <paramref name="x"/> is positive, or -0 if <paramref name="x"/> is negative.
            If <paramref name="y"/> = 0, <see cref="F:System.Double.NaN"/> is returned.</returns>
        </member>
        <member name="M:System.Math.Log(System.Double)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="d">The number whose logarithm is to be found. </param>
            <returns>The natural logarithm of <paramref name="d"/>; that is, ln <paramref name="d"/>, or log e <paramref name="d"/></returns>
        </member>
        <member name="M:System.Math.Log10(System.Double)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="d">A number whose logarithm is to be found. </param>
            <returns>The base 10 log of <paramref name="d"/>; that is, log 10 <paramref name="d"/>.</returns>
        </member>
        <member name="M:System.Math.Max(System.Int32,System.Int32)">
            <summary>
            Returns the larger of two 32-bit signed integers.
            </summary>
            <param name="val1">The first of two 32-bit signed integers to compare. </param>
            <param name="val2">The second of two 32-bit signed integers to compare. </param>
            <returns>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.Double,System.Double)">
            <summary>
            Returns the larger of two double-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two double-precision floating-point numbers to compare. </param>
            <param name="val2">The second of two double-precision floating-point numbers to compare. </param>
            <returns>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger. If <paramref name="val1"/>, <paramref name="val2"/>, or both <paramref name="val1"/> and <paramref name="val2"/> are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
        </member>
        <member name="M:System.Math.Max(System.Single,System.Single)">
            <summary>
            Returns the larger of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
            <returns>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger. If <paramref name="val1"/>, or <paramref name="val2"/>, or both <paramref name="val1"/> and <paramref name="val2"/> are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.</returns>
        </member>
        <member name="M:System.Math.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smaller of two 32-bit signed integers.
            </summary>
            <param name="val1">The first of two 32-bit signed integers to compare. </param>
            <param name="val2">The second of two 32-bit signed integers to compare. </param>
            <returns>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.Double,System.Double)">
            <summary>
            Returns the smaller of two double-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two double-precision floating-point numbers to compare. </param>
            <param name="val2">The second of two double-precision floating-point numbers to compare. </param>
            <returns>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller. If <paramref name="val1"/>, <paramref name="val2"/>, or both <paramref name="val1"/> and <paramref name="val2"/> are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
        </member>
        <member name="M:System.Math.Min(System.Single,System.Single)">
            <summary>
            Returns the smaller of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare. </param>
            <param name="val2">The second of two single-precision floating-point numbers to compare. </param>
            <returns>Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller. If <paramref name="val1"/>, <paramref name="val2"/>, or both <paramref name="val1"/> and <paramref name="val2"/> are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.</returns>
        </member>
        <member name="M:System.Math.Pow(System.Double,System.Double)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A double-precision floating-point number to be raised to a power.</param>
            <param name="y">A double-precision floating-point number that specifies a power.</param>
            <returns>The number <paramref name="x"/> raised to the power <paramref name="y"/>.</returns>
        </member>
        <member name="M:System.Math.Round(System.Double)">
            <summary>
            Rounds a double-precision floating-point value to the nearest integral value.
            </summary>
            <param name="a">A double-precision floating-point number to be rounded.</param>
            <returns>The integer nearest <paramref name="a"/>. If the fractional component of <paramref name="a"/> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <see cref="T:System.Double"/> instead of an integral type.</returns>
        </member>
        <member name="M:System.Math.Sign(System.Double)">
            <summary>
            Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="value">A signed number. </param>
            <returns>A number that indicates the sign of <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Math.Sign(System.Single)">
            <summary>
            Returns a value indicating the sign of a single-precision floating-point number.
            </summary>
            <param name="value">A signed number. </param>
            <returns>A number that indicates the sign of <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Math.Sin(System.Double)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians. </param>
            <returns>The sine of <paramref name="a"/>. If a is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:System.Math.Sinh(System.Double)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>The hyperbolic sine of <paramref name="value"/>. If <paramref name="value"/> is equal to <see cref="F:System.Double.NegativeInfinity"/>, <see cref="F:System.Double.PositiveInfinity"/>, or <see cref="F:System.Double.NaN"/>, this method returns a <see cref="T:System.Double"/> equal to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Math.Sqrt(System.Double)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="d">The number whose square root is to be found.</param>
            <returns>The positive square root of <paramref name="d"/>.</returns>
        </member>
        <member name="M:System.Math.Tan(System.Double)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians. </param>
            <returns>The tangent of <paramref name="a"/>. If <paramref name="a"/> is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:System.Math.Tanh(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians. </param>
            <returns>The hyperbolic tangent of <paramref name="value"/>. If <paramref name="value"/> is equal to <see cref="F:System.Double.NegativeInfinity"/>, this method returns -1. If <paramref name="value"/> is equal to <see cref="F:System.Double.PositiveInfinity"/>, this method returns 1. If <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:System.Math.Truncate(System.Double)">
            <summary>
            Calculates the integral part of a specified double-precision floating-point number.
            </summary>
            <param name="d">A number to truncate.</param>
            <returns>The integral part of <paramref name="d"/>; that is, the number that remains after any fractional digits have been discarded.</returns>
        </member>
    </members>
</doc>
